{
    "submissionDetails": [
        {
            "problemSetProblemId": "1925500262287564801",
            "programmingSubmissionDetail": {
                "compiler": "GCC",
                "program": "#include<stdio.h>\n\ntypedef struct People{\n    char name[50];\n    int h;\n    int w;\n    int id;\n}people;\n\nint cmp(const void *a,const void *b){\n    people *p1 = (people *)a;\n    people *p2 = (people *)b;\n    if(p1->h != p2->h){\n        return p1->h - p2->h;\n    }else if(p1->w != p2->w){\n        return p1->w - p2->w;\n    }else{\n        return p1->id - p2 ->id;\n    }\n}\n\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    people *p = (people *)malloc(n*sizeof(people));\n    for(int i=0;i<n;i++){\n        scanf(\"%s %d %d\",p[i].name,&p[i].h,&p[i].w);\n        p[i].id = i;\n    }\n    int min_h,max_h,min_w,max_w;\n    scanf(\"%d %d %d %d\",&min_h,&max_h,&min_w,&max_w);\n    qsort(p,n,sizeof(people),cmp);\n    int count = 0,cnt = 0;\n    while(count < n && p[count].h <= max_h){\n        if(p[count].h < min_h || p[count].w < min_w || p[count].w > max_w){\n            count++;\n            continue;\n        }\n        printf(\"%s %d %d\\n\",p[count].name,p[count].h,p[count].w);\n        count++;\n        cnt++;\n    }\n    if(cnt == 0){\n        printf(\"NO\");\n    }\n}"
            },
            "problemId": "0"
        }
    ],
    "judgeResponseContents": [
        {
            "status": "ACCEPTED",
            "score": 10.0,
            "programmingJudgeResponseContent": {
                "testcaseJudgeResults": {
                    "1": {
                        "result": "ACCEPTED",
                        "exceed": "UNKNOWN_TESTCASE_EXCEED",
                        "time": 0.001,
                        "memory": 544768,
                        "exitcode": 0,
                        "termsig": 0,
                        "error": "",
                        "stdout": "",
                        "stderr": "",
                        "checkerOutput": "",
                        "testcaseScore": 1.0,
                        "stdoutTruncated": false,
                        "stderrTruncated": false,
                        "showOutput": false
                    },
                    "2": {
                        "result": "ACCEPTED",
                        "exceed": "UNKNOWN_TESTCASE_EXCEED",
                        "time": 0.001,
                        "memory": 589824,
                        "exitcode": 0,
                        "termsig": 0,
                        "error": "",
                        "stdout": "",
                        "stderr": "",
                        "checkerOutput": "",
                        "testcaseScore": 2.0,
                        "stdoutTruncated": false,
                        "stderrTruncated": false,
                        "showOutput": false
                    },
                    "3": {
                        "result": "ACCEPTED",
                        "exceed": "UNKNOWN_TESTCASE_EXCEED",
                        "time": 0.001,
                        "memory": 589824,
                        "exitcode": 0,
                        "termsig": 0,
                        "error": "",
                        "stdout": "",
                        "stderr": "",
                        "checkerOutput": "",
                        "testcaseScore": 2.0,
                        "stdoutTruncated": false,
                        "stderrTruncated": false,
                        "showOutput": false
                    },
                    "4": {
                        "result": "ACCEPTED",
                        "exceed": "UNKNOWN_TESTCASE_EXCEED",
                        "time": 0.001,
                        "memory": 589824,
                        "exitcode": 0,
                        "termsig": 0,
                        "error": "",
                        "stdout": "",
                        "stderr": "",
                        "checkerOutput": "",
                        "testcaseScore": 2.0,
                        "stdoutTruncated": false,
                        "stderrTruncated": false,
                        "showOutput": false
                    },
                    "5": {
                        "result": "ACCEPTED",
                        "exceed": "UNKNOWN_TESTCASE_EXCEED",
                        "time": 0.001,
                        "memory": 593920,
                        "exitcode": 0,
                        "termsig": 0,
                        "error": "",
                        "stdout": "",
                        "stderr": "",
                        "checkerOutput": "",
                        "testcaseScore": 2.0,
                        "stdoutTruncated": false,
                        "stderrTruncated": false,
                        "showOutput": false
                    },
                    "6": {
                        "result": "ACCEPTED",
                        "exceed": "UNKNOWN_TESTCASE_EXCEED",
                        "time": 0.001,
                        "memory": 532480,
                        "exitcode": 0,
                        "termsig": 0,
                        "error": "",
                        "stdout": "",
                        "stderr": "",
                        "checkerOutput": "",
                        "testcaseScore": 1.0,
                        "stdoutTruncated": false,
                        "stderrTruncated": false,
                        "showOutput": false
                    }
                },
                "compilationResult": {
                    "log": "a.c: In function ‘main’:\na.c:25:27: warning: implicit declaration of function ‘malloc’ [-Wimplicit-function-declaration]\n   25 |     people *p = (people *)malloc(n*sizeof(people));\n      |                           ^~~~~~\na.c:2:1: note: include ‘<stdlib.h>’ or provide a declaration of ‘malloc’\n    1 | #include<stdio.h>\n  +++ |+#include <stdlib.h>\n    2 | \na.c:25:27: warning: incompatible implicit declaration of built-in function ‘malloc’ [-Wbuiltin-declaration-mismatch]\n   25 |     people *p = (people *)malloc(n*sizeof(people));\n      |                           ^~~~~~\na.c:25:27: note: include ‘<stdlib.h>’ or provide a declaration of ‘malloc’\na.c:32:5: warning: implicit declaration of function ‘qsort’ [-Wimplicit-function-declaration]\n   32 |     qsort(p,n,sizeof(people),cmp);\n      |     ^~~~~\na.c:24:5: warning: ignoring return value of ‘scanf’ declared with attribute ‘warn_unused_result’ [-Wunused-result]\n   24 |     scanf(\"%d\",&n);\n      |     ^~~~~~~~~~~~~~\na.c:27:9: warning: ignoring return value of ‘scanf’ declared with attribute ‘warn_unused_result’ [-Wunused-result]\n   27 |         scanf(\"%s %d %d\",p[i].name,&p[i].h,&p[i].w);\n      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\na.c:31:5: warning: ignoring return value of ‘scanf’ declared with attribute ‘warn_unused_result’ [-Wunused-result]\n   31 |     scanf(\"%d %d %d %d\",&min_h,&max_h,&min_w,&max_w);\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                    "success": true,
                    "error": ""
                },
                "checkerCompilationResult": {
                    "log": "",
                    "success": false,
                    "error": ""
                }
            },
            "problemSetProblemId": "1925500262287564801"
        }
    ],
    "hints": {},
    "problemSetId": "1921540045437001728",
    "cause": "",
    "id": "1925528279185457152",
    "userId": "1849272780568821760",
    "problemType": "PROGRAMMING",
    "problemSetProblemId": "1925500262287564801",
    "submitAt": "2025-05-22T12:24:50Z",
    "status": "ACCEPTED",
    "score": 10.0,
    "compiler": "GCC",
    "time": 0.001,
    "memory": 593920,
    "previewSubmission": false,
    "judgeAt": "2025-05-22T12:24:51Z"
}