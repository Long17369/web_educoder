{
    "submissionDetails": [
        {
            "problemSetProblemId": "1930572357785571328",
            "codeCompletionSubmissionDetail": {
                "program": "void insert(List L, List X){\n    List tmp = L->Next;\n    L->Next = X->Next;\n    X->Next = X->Next->Next;\n    L->Next->Next = tmp;\n}\n\nList Merge(List L1, List L2){\n    List begin = (List)malloc(sizeof(struct Node));\n    begin->Next = NULL;\n    List p = begin;\n    while(L1->Next!=NULL && L2->Next != NULL){\n        if(L1->Next->Data < L2->Next->Data) insert(p,L1);\n        else insert(p,L2);\n        p = p->Next;\n    }\n    while(L1->Next!=NULL){\n        insert(p,L1);\n        p = p->Next;\n    }\n    while(L2->Next!=NULL){\n        insert(p,L2);\n        p = p->Next;\n    }\n    return begin;\n}"
            },
            "problemId": "0"
        }
    ],
    "judgeResponseContents": [
        {
            "codeCompletionJudgeResponseContent": {
                "compilationResult": {
                    "log": "a.c: In function ‘Read’:\na.c:17:9: warning: ignoring return value of ‘scanf’ declared with attribute ‘warn_unused_result’ [-Wunused-result]\n   17 |         scanf(\"%d\", &N);\n      |         ^~~~~~~~~~~~~~~\na.c:22:17: warning: ignoring return value of ‘scanf’ declared with attribute ‘warn_unused_result’ [-Wunused-result]\n   22 |                 scanf(\"%d\", &Rear->Next->Data);\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                    "success": true,
                    "error": ""
                },
                "checkerCompilationResult": {
                    "log": "",
                    "success": false,
                    "error": ""
                },
                "testcaseJudgeResults": {
                    "0": {
                        "result": "ACCEPTED",
                        "exceed": "UNKNOWN_TESTCASE_EXCEED",
                        "time": 0.001,
                        "memory": 315392,
                        "exitcode": 0,
                        "termsig": 0,
                        "error": "",
                        "stdout": "",
                        "stderr": "",
                        "checkerOutput": "",
                        "testcaseScore": 4,
                        "stdoutTruncated": false,
                        "stderrTruncated": false,
                        "showOutput": false
                    },
                    "1": {
                        "result": "ACCEPTED",
                        "exceed": "UNKNOWN_TESTCASE_EXCEED",
                        "time": 0.001,
                        "memory": 352256,
                        "exitcode": 0,
                        "termsig": 0,
                        "error": "",
                        "stdout": "",
                        "stderr": "",
                        "checkerOutput": "",
                        "testcaseScore": 2,
                        "stdoutTruncated": false,
                        "stderrTruncated": false,
                        "showOutput": false
                    },
                    "2": {
                        "result": "ACCEPTED",
                        "exceed": "UNKNOWN_TESTCASE_EXCEED",
                        "time": 0.001,
                        "memory": 589824,
                        "exitcode": 0,
                        "termsig": 0,
                        "error": "",
                        "stdout": "",
                        "stderr": "",
                        "checkerOutput": "",
                        "testcaseScore": 2,
                        "stdoutTruncated": false,
                        "stderrTruncated": false,
                        "showOutput": false
                    },
                    "3": {
                        "result": "ACCEPTED",
                        "exceed": "UNKNOWN_TESTCASE_EXCEED",
                        "time": 0.001,
                        "memory": 589824,
                        "exitcode": 0,
                        "termsig": 0,
                        "error": "",
                        "stdout": "",
                        "stderr": "",
                        "checkerOutput": "",
                        "testcaseScore": 1,
                        "stdoutTruncated": false,
                        "stderrTruncated": false,
                        "showOutput": false
                    },
                    "4": {
                        "result": "ACCEPTED",
                        "exceed": "UNKNOWN_TESTCASE_EXCEED",
                        "time": 0.001,
                        "memory": 593920,
                        "exitcode": 0,
                        "termsig": 0,
                        "error": "",
                        "stdout": "",
                        "stderr": "",
                        "checkerOutput": "",
                        "testcaseScore": 1,
                        "stdoutTruncated": false,
                        "stderrTruncated": false,
                        "showOutput": false
                    }
                }
            },
            "status": "ACCEPTED",
            "score": 10.0,
            "problemSetProblemId": "1930572357785571328"
        }
    ],
    "hints": {},
    "problemSetId": "1926923630154801152",
    "cause": "",
    "id": "1930596837448855552",
    "userId": "1849272780568821760",
    "problemType": "CODE_COMPLETION",
    "problemSetProblemId": "1930572357785571328",
    "submitAt": "2025-06-05T12:05:29Z",
    "status": "ACCEPTED",
    "score": 10.0,
    "compiler": "GCC",
    "time": 0.001,
    "memory": 593920,
    "previewSubmission": false,
    "judgeAt": "2025-06-05T12:05:29Z"
}